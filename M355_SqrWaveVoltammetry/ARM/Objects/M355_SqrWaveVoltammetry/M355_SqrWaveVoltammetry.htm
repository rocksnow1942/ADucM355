<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\M355_SqrWaveVoltammetry\M355_SqrWaveVoltammetry.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\M355_SqrWaveVoltammetry\M355_SqrWaveVoltammetry.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Apr 12 15:12:27 2021
<BR><P>
<H3>Maximum Stack Usage =        912 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; AD5940_Main &rArr; AppSWVInit &rArr; AppSWVRtiaCal &rArr; AD5940_LPRtiaCal &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NmiSR</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PENDSV_HANDLER</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PENDSV_HANDLER</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[32]">ADC_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC_Int_Handler</a><BR>
 <LI><a href="#[ce]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">cJSON_Delete</a><BR>
 <LI><a href="#[11f]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">parse_value</a><BR>
 <LI><a href="#[11a]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[113]">parse_value</a><BR>
 <LI><a href="#[e4]">AppSWVSeqDACCtrlGen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e4]">AppSWVSeqDACCtrlGen</a><BR>
 <LI><a href="#[8c]">AD5940_ClksCalculate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">AD5940_ClksCalculate</a><BR>
 <LI><a href="#[8b]">AD5940_Delay10us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8b]">AD5940_Delay10us</a><BR>
 <LI><a href="#[cd]">AppSWVCtrl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">AppSWVCtrl</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[34]">AfeAdc_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[36]">AfeCMDFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[39]">AfeCrcError_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[37]">AfeDATAFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[33]">AfeError_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[35]">AfeGeneral_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3a]">AfeGpTimer0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3b]">AfeGpTimer1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[38]">AfeWdt_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[11]">Afe_Int3_Handler</a> from aducm355port.o(i.Afe_Int3_Handler) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[14]">Battery_Voltage_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2d]">Crypto_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2e]">DMA_ADC0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2a]">DMA_AES0_IN_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2b]">DMA_AES0_OUT_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3c]">DMA_AfeCMDFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3d]">DMA_AfeDATAFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[20]">DMA_Err_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2c]">DMA_FLASH0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[29]">DMA_I2C0_MX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[28]">DMA_I2C0_SRX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[27]">DMA_I2C0_STX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3e]">DMA_SIP2_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3f]">DMA_SIP3_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[40]">DMA_SIP4_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[41]">DMA_SIP5_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[42]">DMA_SIP6_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[43]">DMA_SIP7_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[24]">DMA_SPI0_RX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[23]">DMA_SPI0_TX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[22]">DMA_SPI1_RX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[21]">DMA_SPI1_TX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[26]">DMA_UART_RX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[25]">DMA_UART_TX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[e]">Ext_Int0_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[f]">Ext_Int1_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[10]">Ext_Int2_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1a]">Flash0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[16]">GPIO_A_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[17]">GPIO_B_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[18]">GP_Tmr0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[19]">GP_Tmr1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2f]">GP_Tmr2_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1f]">I2C0_Master_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1e]">I2C0_Slave_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[4]">NmiSR</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[b]">PENDSV_HANDLER</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[30]">PLL_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[31]">RNG_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[15]">RTC0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[d]">RTC1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1c]">SPI0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1d]">SPI1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[45]">SystemInit</a> from system_aducm355.o(i.SystemInit) referenced from startup_aducm355.o(.text)
 <LI><a href="#[1b]">UART_Int_Handler</a> from ad5940main.o(i.UART_Int_Handler) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[13]">Vreg_over_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[12]">WDog_Tmr_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[46]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_aducm355.o(.text)
 <LI><a href="#[48]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[47]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4a]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[49]">isspace</a> from isspace_c.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[44]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[2]">realloc</a> from mallocr.o(i.realloc) referenced 2 times from cjson.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[129]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[12a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[12d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[4f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>DioRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diolib.o(i.DioRd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChipInserted
</UL>

<P><STRONG><a name="[130]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NmiSR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PENDSV_HANDLER</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PENDSV_HANDLER
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PENDSV_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>AfeAdc_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>AfeCMDFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>AfeCrcError_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>AfeDATAFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>AfeError_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>AfeGeneral_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AfeGpTimer0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>AfeGpTimer1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>AfeWdt_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Battery_Voltage_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Crypto_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_AES0_IN_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_AES0_OUT_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA_AfeCMDFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA_AfeDATAFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_FLASH0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_I2C0_MX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA_SIP2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA_SIP3_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA_SIP4_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA_SIP5_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA_SIP6_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA_SIP7_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_SPI0_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_SPI0_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Ext_Int0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Ext_Int1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Ext_Int2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Flash0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPIO_A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIO_B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GP_Tmr0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GP_Tmr1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GP_Tmr2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PLL_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RNG_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Vreg_over_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDog_Tmr_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtCfg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[117]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[c4]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[122]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[6e]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[57]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintTemperatureResult
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintTemperatureResult
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCCode2Volt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRtiaCal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVDataProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCCode2Volt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRtiaCal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVDataProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintTemperatureResult
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintTemperatureResult
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[f6]"></a>UrtIntSta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, urtlib.o(i.UrtIntSta))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTIA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCCode2Volt
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintTemperatureResult
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTIA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTIA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[136]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[137]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[5c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[5b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[64]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[63]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[102]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[138]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[139]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[13a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>AD5940RampStructInit</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, ad5940main.o(i.AD5940RampStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940RampStructInit &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVGetCfg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRTIA
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[81]"></a>AD5940_ADCBaseCfgS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCBaseCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_ADCBaseCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[83]"></a>AD5940_ADCCode2Volt</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, ad5940.o(i.AD5940_ADCCode2Volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_ADCCode2Volt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVDataProcess
</UL>

<P><STRONG><a name="[85]"></a>AD5940_ADCDigCompCfgS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ADCDigCompCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_ADCDigCompCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[86]"></a>AD5940_ADCFilterCfgS</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCFilterCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[88]"></a>AD5940_AFECtrlS</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFECtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_AFECtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[89]"></a>AD5940_AFEPwrBW</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFEPwrBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_AFEPwrBW &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
</UL>

<P><STRONG><a name="[76]"></a>AD5940_CLKCfg</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_CLKCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD5940_CLKCfg &rArr; AD5940_HFOSC32MHzCtrl &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[8c]"></a>AD5940_ClksCalculate</STRONG> (Thumb, 346 bytes, Stack size 96 bytes, ad5940.o(i.AD5940_ClksCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + In Cycle
<LI>Call Chain = AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[bf]"></a>AD5940_ClrMCUIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aducm355port.o(i.AD5940_ClrMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[8f]"></a>AD5940_ComplexDivInt</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, ad5940.o(i.AD5940_ComplexDivInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AD5940_ComplexDivInt &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[90]"></a>AD5940_DFTCfgS</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_DFTCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_DFTCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[91]"></a>AD5940_DSPCfgS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_DSPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
</UL>

<P><STRONG><a name="[8b]"></a>AD5940_Delay10us</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, aducm355port.o(i.AD5940_Delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = AD5940_Delay10us &rArr;  AD5940_Delay10us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>

<P><STRONG><a name="[93]"></a>AD5940_EnterSleepS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_EnterSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_EnterSleepS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ShutDownS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[77]"></a>AD5940_FIFOCfg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_FIFOCfg &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[94]"></a>AD5940_FIFOCtrlS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_FIFOCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
</UL>

<P><STRONG><a name="[95]"></a>AD5940_FIFOGetCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_FIFOGetCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_FIFOGetCnt &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[db]"></a>AD5940_FIFORd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_FIFORd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[c0]"></a>AD5940_GetMCUIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aducm355port.o(i.AD5940_GetMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[8a]"></a>AD5940_HFOSC32MHzCtrl</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_HFOSC32MHzCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_HFOSC32MHzCtrl &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>

<P><STRONG><a name="[96]"></a>AD5940_HSDacCfgS</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_HSDacCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_HSDacCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[97]"></a>AD5940_HSLoopCfgS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HSLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD5940_HSLoopCfgS &rArr; AD5940_HSTIACfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[98]"></a>AD5940_HSTIACfgS</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_HSTIACfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AD5940_HSTIACfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[79]"></a>AD5940_INTCCfg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_INTCCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_INTCCfg &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[7a]"></a>AD5940_INTCClrFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_INTCClrFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_INTCClrFlag &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[9b]"></a>AD5940_INTCGetCfg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_INTCGetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_INTCGetCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[9c]"></a>AD5940_INTCGetFlag</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_INTCGetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_INTCGetFlag &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[9d]"></a>AD5940_INTCTestFlag</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_INTCTestFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_INTCTestFlag &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[75]"></a>AD5940_Initialize</STRONG> (Thumb, 150 bytes, Stack size 120 bytes, ad5940.o(i.AD5940_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_Initialize &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[7b]"></a>AD5940_LFOSCMeasure</STRONG> (Thumb, 446 bytes, Stack size 160 bytes, ad5940.o(i.AD5940_LFOSCMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AD5940_LFOSCMeasure &rArr; AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTTime
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQTimeOutRd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[a7]"></a>AD5940_LPAMPCfgS</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPAMPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_LPAMPCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[a8]"></a>AD5940_LPDAC0WriteS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDAC0WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_LPDAC0WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[a9]"></a>AD5940_LPDAC1WriteS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDAC1WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[aa]"></a>AD5940_LPDACCfgS</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDACCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AD5940_LPDACCfgS &rArr; AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[ab]"></a>AD5940_LPLoopCfgS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_LPLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD5940_LPLoopCfgS &rArr; AD5940_LPDACCfgS &rArr; AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ShutDownS
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
</UL>

<P><STRONG><a name="[ac]"></a>AD5940_LPRtiaCal</STRONG> (Thumb, 2234 bytes, Stack size 520 bytes, ad5940.o(i.AD5940_LPRtiaCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = AD5940_LPRtiaCal &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGDACCodeS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoGet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_ReferenceON
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRtiaCal
</UL>

<P><STRONG><a name="[ba]"></a>AD5940_MCUResourceInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, aducm355port.o(i.AD5940_MCUResourceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AD5940_MCUResourceInit &rArr; DioCfgPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioIenPin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfgPin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EiCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>AD5940_Main</STRONG> (Thumb, 862 bytes, Stack size 64 bytes, ad5940main.o(i.AD5940_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = AD5940_Main &rArr; AppSWVInit &rArr; AppSWVRtiaCal &rArr; AD5940_LPRtiaCal &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItemCaseSensitive
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintTemperatureResult
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelectPins
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isChipInserted
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>AD5940_PrintTemperatureResult</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, temperature.o(i.AD5940_PrintTemperatureResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AD5940_PrintTemperatureResult &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[cf]"></a>AD5940_REFCfgS</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_REFCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_REFCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ShutDownS
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_ReferenceON
</UL>

<P><STRONG><a name="[b7]"></a>AD5940_ReadAfeResult</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadAfeResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_ReadAfeResult &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[87]"></a>AD5940_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_D2DReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetFlag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQTimeOutRd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoGet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
</UL>

<P><STRONG><a name="[78]"></a>AD5940_SEQCfg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQCfg &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[d2]"></a>AD5940_SEQCmdWrite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
</UL>

<P><STRONG><a name="[a6]"></a>AD5940_SEQCtrlS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[de]"></a>AD5940_SEQGenCtrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[df]"></a>AD5940_SEQGenFetchSeq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenFetchSeq))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[dd]"></a>AD5940_SEQGenInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInit))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[d8]"></a>AD5940_SEQGenInsert</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInsert))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[a0]"></a>AD5940_SEQGetCfg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQGetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQGetCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[d4]"></a>AD5940_SEQGpioCtrlS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGpioCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SEQGpioCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[a1]"></a>AD5940_SEQInfoCfg</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQInfoCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[b5]"></a>AD5940_SEQInfoGet</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQInfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQInfoGet &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[b6]"></a>AD5940_SEQMmrTrig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQMmrTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SEQMmrTrig &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
</UL>

<P><STRONG><a name="[a4]"></a>AD5940_SEQTimeOutRd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQTimeOutRd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SEQTimeOutRd &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[99]"></a>AD5940_SWMatrixCfgS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SWMatrixCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SWMatrixCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[d9]"></a>AD5940_ShutDownS</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, ad5940.o(i.AD5940_ShutDownS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_ShutDownS &rArr; AD5940_LPLoopCfgS &rArr; AD5940_LPDACCfgS &rArr; AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
</UL>

<P><STRONG><a name="[7c]"></a>AD5940_SleepKeyCtrlS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SleepKeyCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SleepKeyCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ShutDownS
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[92]"></a>AD5940_StatisticCfgS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_StatisticCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_StatisticCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[b1]"></a>AD5940_StructInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ShutDownS
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRtiaCal
</UL>

<P><STRONG><a name="[c9]"></a>AD5940_TemperatureISR</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, temperature.o(i.AD5940_TemperatureISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AD5940_TemperatureISR &rArr; AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetFlag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c8]"></a>AD5940_TemperatureInit</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, temperature.o(i.AD5940_TemperatureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AD5940_TemperatureInit &rArr; _ad5940_analog_init &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[9a]"></a>AD5940_WGCfgS</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WGCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WGCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[b2]"></a>AD5940_WGDACCodeS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WGDACCodeS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_WGDACCodeS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[b4]"></a>AD5940_WGFreqWordCal</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, ad5940.o(i.AD5940_WGFreqWordCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AD5940_WGFreqWordCal &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[a2]"></a>AD5940_WUPTCfg</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WUPTCfg &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[a3]"></a>AD5940_WUPTCtrl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WUPTCtrl &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRegModify
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[a5]"></a>AD5940_WUPTTime</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WUPTTime &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[da]"></a>AD5940_WakeUp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[82]"></a>AD5940_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_D2DWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGDACCodeS
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
</UL>

<P><STRONG><a name="[11]"></a>Afe_Int3_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aducm355port.o(i.Afe_Int3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Afe_Int3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EiClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>AppSWVCtrl</STRONG> (Thumb, 284 bytes, Stack size 104 bytes, sqrwavevoltammetry.o(i.AppSWVCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = AppSWVCtrl &rArr;  AppSWVCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ShutDownS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[7e]"></a>AppSWVGetCfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sqrwavevoltammetry.o(i.AppSWVGetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>

<P><STRONG><a name="[c1]"></a>AppSWVISR</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, sqrwavevoltammetry.o(i.AppSWVISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AppSWVISR &rArr; AppSWVCtrl &rArr;  AppSWVCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetFlag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRegModify
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVDataProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVCtrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[cc]"></a>AppSWVInit</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, sqrwavevoltammetry.o(i.AppSWVInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = AppSWVInit &rArr; AppSWVRtiaCal &rArr; AD5940_LPRtiaCal &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqInitGen
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqADCCtrlGen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVRtiaCal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[eb]"></a>ClkDivCfg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, clklib.o(i.ClkDivCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ClkDivCfg &rArr; clockUpdate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2DClkSpeedCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
</UL>

<P><STRONG><a name="[ee]"></a>ClockInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ClockInit &rArr; ClkDivCfg &rArr; clockUpdate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigClkSel
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDivCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>D2DClkSpeedCheck</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clklib.o(i.D2DClkSpeedCheck))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDivCfg
</UL>

<P><STRONG><a name="[ef]"></a>DigClkSel</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, clklib.o(i.DigClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
</UL>

<P><STRONG><a name="[bb]"></a>DioCfgPin</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, diolib.o(i.DioCfgPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DioCfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[125]"></a>DioClrPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(i.DioClrPin))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelect1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelect0
</UL>

<P><STRONG><a name="[bc]"></a>DioIenPin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diolib.o(i.DioIenPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DioIenPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[f2]"></a>DioOenPin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diolib.o(i.DioOenPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DioOenPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[f1]"></a>DioPulPin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diolib.o(i.DioPulPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DioPulPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
</UL>

<P><STRONG><a name="[124]"></a>DioSetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, diolib.o(i.DioSetPin))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelect1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelect0
</UL>

<P><STRONG><a name="[bd]"></a>EiCfg</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, intlib.o(i.EiCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EiCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
</UL>

<P><STRONG><a name="[e2]"></a>EiClr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intlib.o(i.EiClr))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Afe_Int3_Handler
</UL>

<P><STRONG><a name="[f0]"></a>GPIOInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIOInit &rArr; DioCfgPin
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioPulPin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioOenPin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioIenPin
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>SystemInit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, system_aducm355.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_system_EnableRetention
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_default_setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>UART_Int_Handler</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ad5940main.o(i.UART_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Int_Handler &rArr; strncat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtRx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtLinSta
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtIntSta
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>UartInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UartInit &rArr; UrtCfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtIntCfg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtFifoClr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtFifoCfg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtCfg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>UrtCfg</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, urtlib.o(i.UrtCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UrtCfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[fa]"></a>UrtFifoCfg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, urtlib.o(i.UrtFifoCfg))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[fb]"></a>UrtFifoClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, urtlib.o(i.UrtFifoClr))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[fc]"></a>UrtIntCfg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, urtlib.o(i.UrtIntCfg))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[f5]"></a>UrtLinSta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, urtlib.o(i.UrtLinSta))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
</UL>

<P><STRONG><a name="[f7]"></a>UrtRx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, urtlib.o(i.UrtRx))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Int_Handler
</UL>

<P><STRONG><a name="[116]"></a>UrtTx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, urtlib.o(i.UrtTx))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[fd]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
</UL>

<P><STRONG><a name="[13d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[0]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPrint
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[103]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[104]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[13f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[140]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[141]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10c]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[dc]"></a>_ad5940_analog_init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, temperature.o(i._ad5940_analog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ad5940_analog_init &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[58]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f4]"></a>adi_default_setting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_aducm355.o(i.adi_default_setting))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f3]"></a>adi_system_EnableRetention</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_aducm355.o(i.adi_system_EnableRetention))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[109]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[b9]"></a>atan2</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[ce]"></a>cJSON_Delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[c6]"></a>cJSON_GetObjectItemCaseSensitive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItemCaseSensitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItemCaseSensitive &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c5]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[110]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[ed]"></a>clockUpdate</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, clklib.o(i.clockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = clockUpdate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDivCfg
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[80]"></a>getRTIA</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ad5940main.o(i.getRTIA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getRTIA &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940RampStructInit
</UL>

<P><STRONG><a name="[c7]"></a>isChipInserted</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5940main.o(i.isChipInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isChipInserted
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioRd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = main &rArr; AD5940_Main &rArr; AppSWVInit &rArr; AppSWVRtiaCal &rArr; AD5940_LPRtiaCal &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e0]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[2]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>setSelect0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5940main.o(i.setSelect0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setSelect0
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioSetPin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioClrPin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelectPins
</UL>

<P><STRONG><a name="[126]"></a>setSelect1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5940main.o(i.setSelect1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setSelect1
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioSetPin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioClrPin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelectPins
</UL>

<P><STRONG><a name="[cb]"></a>setSelectPins</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ad5940main.o(i.setSelectPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setSelectPins &rArr; setSelect1
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelect1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSelect0
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[b8]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[11d]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[74]"></a>AD5940PlatformCfg</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, ad5940main.o(i.AD5940PlatformCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AD5940PlatformCfg &rArr; AD5940_LFOSCMeasure &rArr; AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[c2]"></a>uartPrint</STRONG> (Thumb, 580 bytes, Stack size 96 bytes, ad5940main.o(i.uartPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uartPrint &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVGetCfg
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[e3]"></a>AppSWVDataProcess</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sqrwavevoltammetry.o(i.AppSWVDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AppSWVDataProcess &rArr; AD5940_ADCCode2Volt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCCode2Volt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
</UL>

<P><STRONG><a name="[e5]"></a>AppSWVRegModify</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sqrwavevoltammetry.o(i.AppSWVRegModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AppSWVRegModify &rArr; AD5940_WUPTCtrl &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
</UL>

<P><STRONG><a name="[e6]"></a>AppSWVRtiaCal</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, sqrwavevoltammetry.o(i.AppSWVRtiaCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = AppSWVRtiaCal &rArr; AD5940_LPRtiaCal &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
</UL>

<P><STRONG><a name="[e8]"></a>AppSWVSeqADCCtrlGen</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, sqrwavevoltammetry.o(i.AppSWVSeqADCCtrlGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = AppSWVSeqADCCtrlGen &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
</UL>

<P><STRONG><a name="[e4]"></a>AppSWVSeqDACCtrlGen</STRONG> (Thumb, 808 bytes, Stack size 64 bytes, sqrwavevoltammetry.o(i.AppSWVSeqDACCtrlGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = AppSWVSeqDACCtrlGen &rArr;  AppSWVSeqDACCtrlGen (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RampDacRegUpdate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVISR
</UL>

<P><STRONG><a name="[e7]"></a>AppSWVSeqInitGen</STRONG> (Thumb, 410 bytes, Stack size 168 bytes, sqrwavevoltammetry.o(i.AppSWVSeqInitGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AppSWVSeqInitGen &rArr; AD5940_LPLoopCfgS &rArr; AD5940_LPDACCfgS &rArr; AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVInit
</UL>

<P><STRONG><a name="[e9]"></a>RampDacRegUpdate</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, sqrwavevoltammetry.o(i.RampDacRegUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RampDacRegUpdate &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppSWVSeqDACCtrlGen
</UL>

<P><STRONG><a name="[112]"></a>buffer_skip_whitespace</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[10e]"></a>cJSON_New_Item</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[114]"></a>case_insensitive_strcmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(i.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[11c]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(i.get_decimal_point))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[10d]"></a>get_object_item</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cjson.o(i.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItemCaseSensitive
</UL>

<P><STRONG><a name="[11a]"></a>parse_array</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[127]"></a>parse_hex4</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[11b]"></a>parse_number</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[11f]"></a>parse_object</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[120]"></a>parse_string</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[113]"></a>parse_value</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[111]"></a>skip_utf8_bom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cjson.o(i.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[121]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, cjson.o(i.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[d1]"></a>AD5940_D2DReadReg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_D2DReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenGetRegDefault
</UL>

<P><STRONG><a name="[e1]"></a>AD5940_D2DWriteReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_D2DWriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[d3]"></a>AD5940_SEQGenGetRegDefault</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQGenGetRegDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_D2DReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[d5]"></a>AD5940_SEQGenSearchReg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenSearchReg))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[d0]"></a>AD5940_SEQReadReg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenGetRegDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>

<P><STRONG><a name="[d6]"></a>AD5940_SEQRegInfoInsert</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQRegInfoInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQRegInfoInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[d7]"></a>AD5940_SEQWriteReg</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[b0]"></a>__AD5940_ReferenceON</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ad5940.o(i.__AD5940_ReferenceON))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __AD5940_ReferenceON &rArr; AD5940_REFCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[b3]"></a>__AD5940_TakeMeasurement</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ad5940.o(i.__AD5940_TakeMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __AD5940_TakeMeasurement &rArr; AD5940_INTCTestFlag &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[105]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fe]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[107]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[106]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[53]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[6d]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
