<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\M355_Temperature\M355_Temperature.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\M355_Temperature\M355_Temperature.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Sep 10 10:42:46 2020
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AD5940_Main &rArr; AD5940PlatformCfg &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NmiSR</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PENDSV_HANDLER</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PENDSV_HANDLER</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[34]">ADC_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">ADC_Int_Handler</a><BR>
 <LI><a href="#[94]">AD5940_ClksCalculate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[94]">AD5940_ClksCalculate</a><BR>
 <LI><a href="#[93]">AD5940_Delay10us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">AD5940_Delay10us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">ADC_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[36]">AfeAdc_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[38]">AfeCMDFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3b]">AfeCrcError_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[39]">AfeDATAFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[35]">AfeError_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[37]">AfeGeneral_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3c]">AfeGpTimer0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3d]">AfeGpTimer1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3a]">AfeWdt_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[13]">Afe_Int3_Handler</a> from aducm355port.o(i.Afe_Int3_Handler) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[16]">Battery_Voltage_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2f]">Crypto_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[30]">DMA_ADC0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2c]">DMA_AES0_IN_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2d]">DMA_AES0_OUT_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3e]">DMA_AfeCMDFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[3f]">DMA_AfeDATAFifo_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[22]">DMA_Err_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2e]">DMA_FLASH0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2b]">DMA_I2C0_MX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[2a]">DMA_I2C0_SRX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[29]">DMA_I2C0_STX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[40]">DMA_SIP2_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[41]">DMA_SIP3_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[42]">DMA_SIP4_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[43]">DMA_SIP5_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[44]">DMA_SIP6_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[45]">DMA_SIP7_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[26]">DMA_SPI0_RX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[25]">DMA_SPI0_TX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[24]">DMA_SPI1_RX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[23]">DMA_SPI1_TX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[28]">DMA_UART_RX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[27]">DMA_UART_TX_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[10]">Ext_Int0_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[11]">Ext_Int1_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[12]">Ext_Int2_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1c]">Flash0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[18]">GPIO_A_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[19]">GPIO_B_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1a]">GP_Tmr0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1b]">GP_Tmr1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[31]">GP_Tmr2_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[21]">I2C0_Master_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[20]">I2C0_Slave_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[6]">NmiSR</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[d]">PENDSV_HANDLER</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[32]">PLL_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[33]">RNG_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[17]">RTC0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[f]">RTC1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1e]">SPI0_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[1f]">SPI1_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_aducm355.o(i.SystemInit) referenced from startup_aducm355.o(.text)
 <LI><a href="#[1d]">UART_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[15]">Vreg_over_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[14]">WDog_Tmr_Int_Handler</a> from startup_aducm355.o(.text) referenced from startup_aducm355.o(RESET)
 <LI><a href="#[4a]">__main</a> from __main.o(!!!main) referenced from startup_aducm355.o(.text)
 <LI><a href="#[49]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[48]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[4f]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[69]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[51]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[53]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[e7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[5c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[55]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[57]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[f0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[61]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[104]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[59]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AD5940_Main &rArr; AD5940PlatformCfg &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[60]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[107]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[62]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NmiSR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PENDSV_HANDLER</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PENDSV_HANDLER
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PENDSV_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>AfeAdc_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>AfeCMDFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>AfeCrcError_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>AfeDATAFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>AfeError_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>AfeGeneral_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>AfeGpTimer0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>AfeGpTimer1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AfeWdt_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Battery_Voltage_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Crypto_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA_ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_AES0_IN_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_AES0_OUT_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA_AfeCMDFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA_AfeDATAFifo_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_FLASH0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_I2C0_MX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA_SIP2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA_SIP3_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA_SIP4_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA_SIP5_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA_SIP6_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA_SIP7_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_SPI0_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_SPI0_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Ext_Int0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Ext_Int1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Ext_Int2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Flash0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPIO_A_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPIO_B_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GP_Tmr0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GP_Tmr1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GP_Tmr2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PLL_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RNG_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Vreg_over_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WDog_Tmr_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_aducm355.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[108]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtCfg
</UL>

<P><STRONG><a name="[10a]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintResult
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[6b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[52]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[10b]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[6a]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[65]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[56]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[6d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[112]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[113]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[70]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>AD5940_GetMCUIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aducm355port.o(i.AD5940_GetMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[114]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[77]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[74]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[75]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[7d]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[71]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[72]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[76]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[89]"></a>AD5940_ADCBaseCfgS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCBaseCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_ADCBaseCfgS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
</UL>

<P><STRONG><a name="[8b]"></a>AD5940_ADCFilterCfgS</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCFilterCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
</UL>

<P><STRONG><a name="[8d]"></a>AD5940_AFECtrlS</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFECtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[87]"></a>AD5940_AGPIOCfg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_AGPIOCfg &rArr; AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[8e]"></a>AD5940_AGPIOFuncCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOFuncCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_AGPIOFuncCfg &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[90]"></a>AD5940_AGPIOIen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOIen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_AGPIOIen &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[8f]"></a>AD5940_AGPIOOen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOOen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_AGPIOOen &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[91]"></a>AD5940_AGPIOPen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOPen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[82]"></a>AD5940_CLKCfg</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_CLKCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD5940_CLKCfg &rArr; AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[94]"></a>AD5940_ClksCalculate</STRONG> (Thumb, 346 bytes, Stack size 96 bytes, ad5940.o(i.AD5940_ClksCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[a5]"></a>AD5940_ClrMCUIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aducm355port.o(i.AD5940_ClrMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[93]"></a>AD5940_Delay10us</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, aducm355port.o(i.AD5940_Delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = AD5940_Delay10us &rArr;  AD5940_Delay10us (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>

<P><STRONG><a name="[9a]"></a>AD5940_EnterSleepS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_EnterSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_EnterSleepS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[83]"></a>AD5940_FIFOCfg</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_FIFOCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[9b]"></a>AD5940_FIFOGetCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_FIFOGetCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_FIFOGetCnt &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[b9]"></a>AD5940_FIFORd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_FIFORd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[92]"></a>AD5940_HFOSC32MHzCtrl</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_HFOSC32MHzCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>

<P><STRONG><a name="[85]"></a>AD5940_INTCCfg</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_INTCCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_INTCCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[86]"></a>AD5940_INTCClrFlag</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_INTCClrFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_INTCClrFlag &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[9c]"></a>AD5940_INTCGetFlag</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_INTCGetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_INTCGetFlag &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[81]"></a>AD5940_Initialize</STRONG> (Thumb, 112 bytes, Stack size 120 bytes, ad5940.o(i.AD5940_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[9d]"></a>AD5940_MCUResourceInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, aducm355port.o(i.AD5940_MCUResourceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AD5940_MCUResourceInit &rArr; DioCfgPin
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EiCfg
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioIenPin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>AD5940_Main</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ad5940_temperature.o(i.AD5940_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AD5940_Main &rArr; AD5940PlatformCfg &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintResult
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>AD5940_PrintResult</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ad5940_temperature.o(i.AD5940_PrintResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = AD5940_PrintResult &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[ac]"></a>AD5940_REFCfgS</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_REFCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_REFCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
</UL>

<P><STRONG><a name="[8c]"></a>AD5940_ReadReg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_D2DReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>

<P><STRONG><a name="[84]"></a>AD5940_SEQCfg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQCfg &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[af]"></a>AD5940_SEQCmdWrite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
</UL>

<P><STRONG><a name="[b0]"></a>AD5940_SEQCtrlS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_SEQCtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[bc]"></a>AD5940_SEQGenCtrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[bd]"></a>AD5940_SEQGenFetchSeq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenFetchSeq))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[bb]"></a>AD5940_SEQGenInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInit))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[b7]"></a>AD5940_SEQGenInsert</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenInsert))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[b2]"></a>AD5940_SEQGpioCtrlS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGpioCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SEQGpioCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[b3]"></a>AD5940_SEQInfoCfg</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQInfoCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[88]"></a>AD5940_SleepKeyCtrlS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SleepKeyCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD5940_SleepKeyCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg
</UL>

<P><STRONG><a name="[a6]"></a>AD5940_TemperatureISR</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ad5940_temperature.o(i.AD5940_TemperatureISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = AD5940_TemperatureISR &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetFlag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[a2]"></a>AD5940_TemperatureInit</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, ad5940_temperature.o(i.AD5940_TemperatureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AD5940_TemperatureInit &rArr; _ad5940_analog_init &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ad5940_analog_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[be]"></a>AD5940_WUPTCfg</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WUPTCfg &rArr; AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[a3]"></a>AD5940_WUPTCtrl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WUPTCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[b8]"></a>AD5940_WakeUp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureISR
</UL>

<P><STRONG><a name="[8a]"></a>AD5940_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD5940_WriteReg &rArr; AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_D2DWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
</UL>

<P><STRONG><a name="[13]"></a>Afe_Int3_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aducm355port.o(i.Afe_Int3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Afe_Int3_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EiClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>ClkDivCfg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, clklib.o(i.ClkDivCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ClkDivCfg &rArr; clockUpdate &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;D2DClkSpeedCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
</UL>

<P><STRONG><a name="[c4]"></a>ClockInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ClockInit &rArr; ClkDivCfg &rArr; clockUpdate &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigClkSel
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDivCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>D2DClkSpeedCheck</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clklib.o(i.D2DClkSpeedCheck))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDivCfg
</UL>

<P><STRONG><a name="[c5]"></a>DigClkSel</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, clklib.o(i.DigClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
</UL>

<P><STRONG><a name="[9e]"></a>DioCfgPin</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, diolib.o(i.DioCfgPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DioCfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[9f]"></a>DioIenPin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diolib.o(i.DioIenPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DioIenPin
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
</UL>

<P><STRONG><a name="[a0]"></a>EiCfg</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, intlib.o(i.EiCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EiCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
</UL>

<P><STRONG><a name="[c0]"></a>EiClr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intlib.o(i.EiClr))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Afe_Int3_Handler
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, system_aducm355.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_system_EnableRetention
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adi_default_setting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm355.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>UartInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UartInit &rArr; UrtCfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtFifoClr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtFifoCfg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtCfg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DioCfgPin
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>UrtCfg</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, urtlib.o(i.UrtCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UrtCfg &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[ca]"></a>UrtFifoCfg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, urtlib.o(i.UrtFifoCfg))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[cb]"></a>UrtFifoClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, urtlib.o(i.UrtFifoClr))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[d1]"></a>UrtTx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, urtlib.o(i.UrtTx))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[79]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ba]"></a>_ad5940_analog_init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, ad5940_temperature.o(i._ad5940_analog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ad5940_analog_init &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_TemperatureInit
</UL>

<P><STRONG><a name="[68]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[63]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c7]"></a>adi_default_setting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_aducm355.o(i.adi_default_setting))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c6]"></a>adi_system_EnableRetention</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_aducm355.o(i.adi_system_EnableRetention))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c3]"></a>clockUpdate</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, clklib.o(i.clockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clockUpdate &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDivCfg
</UL>

<P><STRONG><a name="[6e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[48]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UrtTx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = main &rArr; AD5940_Main &rArr; AD5940PlatformCfg &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
</UL>

<P><STRONG><a name="[d3]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
</UL>

<P><STRONG><a name="[d7]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
</UL>

<P><STRONG><a name="[d8]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clockUpdate
</UL>

<P><STRONG><a name="[115]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d6]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[d9]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintResult
</UL>

<P><STRONG><a name="[db]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[dd]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintResult
</UL>

<P><STRONG><a name="[e0]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[e1]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintResult
</UL>

<P><STRONG><a name="[117]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[118]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[e2]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[dc]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[df]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_PrintResult
</UL>

<P><STRONG><a name="[e3]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[50]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>AD5940PlatformCfg</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, ad5940_temperature.o(i.AD5940PlatformCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AD5940PlatformCfg &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main
</UL>

<P><STRONG><a name="[ae]"></a>AD5940_D2DReadReg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_D2DReadReg))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenGetRegDefault
</UL>

<P><STRONG><a name="[bf]"></a>AD5940_D2DWriteReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_D2DWriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[b1]"></a>AD5940_SEQGenGetRegDefault</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQGenGetRegDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_D2DReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[b4]"></a>AD5940_SEQGenSearchReg</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenSearchReg))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[ad]"></a>AD5940_SEQReadReg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD5940_SEQReadReg &rArr; AD5940_SEQGenGetRegDefault
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenGetRegDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>

<P><STRONG><a name="[b5]"></a>AD5940_SEQRegInfoInsert</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQRegInfoInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQRegInfoInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQReadReg
</UL>

<P><STRONG><a name="[b6]"></a>AD5940_SEQWriteReg</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[da]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[d4]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e4]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[de]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[73]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[49]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
